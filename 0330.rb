# 問題
# 以下の要件を満たすsum_numberメソッドを実装しましょう。
# 第一仮引数をnとし、第二仮引数をmとすること
# nからmまでの数を足し合わせていき、その総和を出力すること（例：n=1,m=5の場合、総和は1+2+3+4+5=11）

# 雛形
def sum_number(n, m)
  # 処理を記述
end

# 呼び出し例
sum_number(1,10)

# 私の回答
def sum_number(n, m)
  sum = 0
  for i in n..m
    sum += i
  end
  puts sum
end

# 模範回答
def sum_number(n, m)
  total = 0 # 総和を代入する変数を、初期値0で定義しておく
  while n <= m   # n<=mの条件を満たす間、処理を繰り返す
    total = total + n # 変数totalに変数nを足す
    n = n + 1
  end
  puts total
end

# 模範回答の解説
# まず、1行目で、仮引数nとmを設定し、数値をそれぞれ受け取ります。

# 2行目で、総和を代入する変数totalを、初期値0で定義しておきます。

# 3行目から6行目でwhile文を使用し、繰り返し処理を記述しています。条件はn <= mとしています。これは、nがmより小さいまたは同じという条件を満たす時、ブロック内の処理を繰り返すと言う意味です。

# 繰り返しの処理内では、まず変数totalにnの数値を足します。そして、nに1を足して、次の繰り返し処理を行います。nがmより大きい数値になったら、処理が終了となります。

# 感想
# 私の回答も模範回答も処理の流れは同じで、
# まず合計を初期値0で定義し、繰り返し処理をした上で、合計値を出力させています。

# 私の回答は、前日までのforを使ったバブルソートを参考に考えたものです。
# forを使うかwhileを使うかの違いですが、繰り返しの範囲を指定する方法が大きく違いますね。
